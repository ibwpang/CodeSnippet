Given a 2D grid, each cell is either a wall 2, a zombie 1 or people 0 (the number zero, one, two).Zombies can turn the nearest 
people(up/down/left/right) into zombies every day, but can not through wall. How long will it take to turn all people into zombies? 
Return -1 if can not turn all people into zombies.

public class Solution {
    /*
     * @param grid: a 2D integer grid
     * @return: an integer
     */
    class Point {
        int x;
        int y;
        public Point(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
    
    final int WALL = 2;
    final int ZOMBIE = 1;
    final int PEOPLE = 0;
    
    public int zombie(int[][] grid) {
        if (grid == null) {
            return -1;
        }
        
        int people = 0;
        Queue<Point> queue = new LinkedList<>();
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == PEOPLE) {
                    people++;
                } else if (grid[i][j] == ZOMBIE) {
                    queue.offer(new Point(i, j));
                    visited[i][j] = true;
                }
            }
        }
        
        int[] xloc = {1, 0, 0, -1};
        int[] yloc = {0, 1, -1, 0};
        int days = 0;
        
        while (!queue.isEmpty()) {
            if (people == 0) {
                return days;
            }
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                Point point = queue.poll();
                for (int j = 0; j < 4; j++) {
                    int newX = point.x + xloc[j];
                    int newY = point.y + yloc[j];
                    if (isValid(grid, newX, newY) && !visited[newX][newY]) {
                        queue.offer(new Point(newX, newY));
                        visited[newX][newY] = true;
                        people--;
                    }
                }                
            }
            days++;
        }
        
        return -1;
    }
    
    public boolean isValid(int[][] grid, int x, int y) {
        if (x >= 0 && x < grid.length && y >= 0 && y < grid[0].length) {
            if (grid[x][y] == PEOPLE) {
                return true;
            }
        }
        return false;
    }
}
