// https://www.youtube.com/watch?v=aZXi1unBdJA

public class Main {
    static int id;
    static int outBound;
    
    public static void main(String[] args) {
        int numRouters1 = 7;
        int numLinks1 = 7;
        int[][] links1 = {{0, 1}, {0, 2}, {1, 3}, {2, 3}, {2, 5}, {5, 6}, {3, 4}};
        System.out.println(getCriticalNodes(links1, numLinks1, numRouters1));
    }

    private static List<Integer> getCriticalNodes(int[][] links, int numLinks, int numRouters) {
        id = 0;
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int i = 0; i < numRouters; i++) {
            map.put(i, new HashSet<>());
        }
        for (int[] link : links) {
            map.get(link[0]).add(link[1]);
            map.get(link[1]).add(link[0]);
        }
        int[] low = new int[numRouters];
        int[] ids = new int[numRouters];
        boolean[] visited = new boolean[numRouters];
        boolean[] isArt = new boolean[numRouters];
        for (int i = 0; i < numRouters; i++) {
            if(!visited[i]){
                outBound = 0;
                dfs(map, low, ids, visited, i, i, -1, isArt);
                isArt[i] = outBound > 1;
            }   
        }
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < isArt.length; i++) {
            if (isArt[i]) {
                ans.add(i);
            }
        }
        return ans;
    }

    private static void dfs(Map<Integer, Set<Integer>> map, int[] low, int[] ids, boolean[] visited, 
                            int root, int cur, int parent, boolean[] isArt) {
        if (parent == root) {
            outBound++;
        }
        visited[cur] = true;
        id++;
        ids[cur] = low[cur] = id;
        for (int nei : map.get(cur)) {
            if (parent == nei) {
                continue;
            }
            if(!visited[nei]) {
                dfs(map, low, ids, visited, root, nei, cur, isArt);
                low[cur] = Math.min(low[cur], low[nei]);  // backtracking propagate
                if (ids[cur] <= low[nei]) { // < is found via bridge, = is found via cycle
                    isArt[cur] = true;
                }
            } else {
                low[cur] = Math.min(low[cur], ids[nei]);  // encounter a cycle
            }
        }
    }
}
